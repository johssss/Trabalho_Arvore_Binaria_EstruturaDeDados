#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura do nó da árvore binária
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Função para criar um novo nó
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        printf("Erro: Não foi possível alocar memória para o novo nó.\n");
        exit(-1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Função para inserir um novo nó na árvore
struct TreeNode* insertNode(struct TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }

    return root;
}

// Função para encontrar o nó com valor mínimo (menor valor) na árvore
struct TreeNode* minValueNode(struct TreeNode* node) {
    struct TreeNode* current = node;

    // Encontra o nó mais à esquerda
    while (current && current->left != NULL) {
        current = current->left;
    }

    return current;
}

// Função para remover um nó da árvore
struct TreeNode* deleteNode(struct TreeNode* root, int data) {
    if (root == NULL) {
        return root;
    }

    // Procura pelo nó a ser deletado
    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    } else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    } else {
        // Caso o nó seja encontrado

        // Nó com apenas um filho ou nenhum filho
        if (root->left == NULL) {
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }

        // Nó com dois filhos: encontra o sucessor em ordem (menor nó na subárvore direita)
        struct TreeNode* temp = minValueNode(root->right);

        // Copia o conteúdo do sucessor para este nó
        root->data = temp->data;

        // Deleta o sucessor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Função para imprimir a árvore em ordem (in-order traversal)
void inorderTraversal(struct TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Função principal
int main() {
    struct TreeNode* root = NULL;
    root = insertNode(root, 50);
    root = insertNode(root, 30);
    root = insertNode(root, 20);
    root = insertNode(root, 40);
    root = insertNode(root, 70);
    root = insertNode(root, 60);
    root = insertNode(root, 80);

    printf("Árvore binária em ordem (in-order traversal): ");
    inorderTraversal(root);
    printf("\n");

    root = deleteNode(root, 20);
    printf("Árvore binária após remover o nó com valor 20: ");
    inorderTraversal(root);
    printf("\n");

    root = deleteNode(root, 30);
    printf("Árvore binária após remover o nó com valor 30: ");
    inorderTraversal(root);
    printf("\n");

    root = deleteNode(root, 50);
    printf("Árvore binária após remover o nó com valor 50: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}
